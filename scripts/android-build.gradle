if (BUILD_APPLICATION.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

def static isNotNull(Object value) {
    if (!(value == null || value.isEmpty())) {
        return true
    } else {
        return false
    }
}

android {
    namespace 'aosp.' + project.getName()
    def androidSdk = rootProject.ext.androidSdk
    compileSdkVersion androidSdk.compileSdkVersion
    buildToolsVersion androidSdk.buildToolsVersion
    defaultConfig {
        if (BUILD_APPLICATION.toBoolean()) {
            applicationId androidSdk.applicationId
            versionCode rootProject.ext.versionCode
            versionName rootProject.ext.versionName
        }
        minSdkVersion androidSdk.minSdkVersion
        targetSdkVersion androidSdk.targetSdkVersion

        if (isNotNull(BUILD_NATIVE_ROOT)) {
            println(project.getName() + " config c/cpp code, root dir = " + BUILD_NATIVE_ROOT)
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++20"
                    abiFilters "arm64-v8a"
                    arguments "-DBUILD_NATIVE_ROOT=" + BUILD_NATIVE_ROOT
                }
            }
        }
    }

    sourceSets {
        main {
            if (isNotNull(BUILD_MANIFEST)) {
                manifest.srcFile BUILD_MANIFEST
            }

            if (isNotNull(BUILD_ASSETS)) {
                assets.srcDirs = [BUILD_ASSETS]
            }

            if (isNotNull(BUILD_RES)) {
                res.srcDirs = [BUILD_RES]
            }

            if (isNotNull(BUILD_SRC)) {
                java.srcDirs = [BUILD_SRC]
            }

            if (isNotNull(BUILD_AIDL)) {
                aidl.srcDirs = [BUILD_AIDL]
            }
        }
    }

    if (isNotNull(BUILD_NATIVE_ROOT)) {
        externalNativeBuild {
            cmake {
                path "CMakeLists.txt"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (BUILD_APPLICATION.toBoolean()) {
        signingConfigs {
            release {
                storeFile file("${rootDir}/keystore/platform.jks")
                storePassword 'android'
                keyAlias 'platform'
                keyPassword 'android'
            }
            debug {
                storeFile file("${rootDir}/keystore/platform.jks")
                storePassword 'android'
                keyAlias 'platform'
                keyPassword 'android'
            }
        }

        buildTypes {
            release {
                zipAlignEnabled true
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "${project.rootDir}/proguard-rules.pro"
                if (BUILD_APPLICATION.toBoolean()) {
                    signingConfig signingConfigs.release
                }
            }
            debug {
                zipAlignEnabled true
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "${project.rootDir}/proguard-rules.pro"
                if (BUILD_APPLICATION.toBoolean()) {
                    signingConfig signingConfigs.debug
                }
            }
        }
    }

    gradle.projectsEvaluated {
        preBuild.dependsOn excludeFolder
        preBuild.dependsOn deleteAndroidSdk

        tasks.withType(JavaCompile) {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList = new ArrayList<>();
            newFileList.add(new File("${rootDir}/system_libs/framework-minus-apex.jar"))
            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(newFileList.toArray())
        }

    }

    if (BUILD_APPLICATION.toBoolean()) {
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def apkName = "ExtFwk.apk"
                outputFileName = new File("./../../../../build/", apkName)
                //logger.log(LogLevel.WARN, "----------> output apk = ${outputFileName}")
            }
        }
    }


    buildFeatures {
        aidl = true
    }
}

task deleteAndroidSdk {
    def dir = "${rootDir}" + File.separator + ".idea" + File.separator + "modules" + File.separator + project.name + File.separator

    def scriptFile = "${rootDir}" + File.separator + "scripts" + File.separator + "delete-sdk.py"
    def cmd = "python " + scriptFile + " -d " + dir
    println(cmd)
    def script = cmd.execute()
    script.waitFor()

    def files = fileTree(dir).filter { it.isFile() }.files.name
    files.forEach { file ->
        def imlFile = dir + file
        println(imlFile)
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            def jdkName = jdkNode.attributes().get('jdkName')
            parsedXml.component[1].remove(jdkNode)
            new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': jdkName, 'jdkType': 'Android SDK'])
            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (Exception e) {
            println("sort sdk node error, " + e)
        }
    }
}

task excludeFolder {
    if (isNotNull(BUILD_NATIVE_ROOT)) {
        def dir = "${rootDir}" + File.separator + ".idea" + File.separator + "modules" + File.separator + project.name + File.separator
        def files = fileTree(dir).filter { it.isFile() }.files.name
        files.forEach { file ->
            if (file.contains("main.iml")) {
                def imlFile = dir + file
                def scriptFile = "${rootDir}" + File.separator + "scripts" + File.separator + "exclude-folder.py"
                println(scriptFile)
                def cmd = "python " + scriptFile + " -p " + rootProject.name + " -f " + imlFile
                println(cmd)
                def script = cmd.execute()
                script.waitFor()
            }
        }
    }
}

dependencies {
    if (isNotNull(BUILD_NATIVE_ROOT)) {
        println("Native [" + project.getName() + "] don't dependence other project")
    } else {
        rootProject.ext.allModules.each { dependence ->
            if (dependence.key == project.name) {
                println("Don't compileOnly myself, project = " + project.name)
            } else {
                if (rootProject.ext.build_aidl.toBoolean()) {
                    println("don't implementation forEach when build aidl")
                } else {
                    println(dependence.value)
                    implementation project(dependence.value)
                }
            }
        }
    }
}
