ext {
    Properties properties = getExtProperties()
    try {
        // 检查 ext/ext.properties or local.properties 是否存在 EXT_AOSP_ROOT
        // 方便其他用户自定义此工程的同时也能随时同步最新代码
        ext_aosp_root = properties.getProperty('EXT_AOSP_ROOT')
        aospRoot = ext_aosp_root
        logger.warn("set aosp root from ext/ext.properties or local.properties")
    } catch (Exception e) {
        logger.warn("has not set ext aosp root , " + e)
        //设置源码所在的目录
        aospRoot = "/home/solo/code/miui"
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            aospRoot = "/Users/solo/code/miui"
        }
    } finally {
        logger.warn("aospRoot = " + aospRoot)
    }

    // aidl 文件生成 java 文件
    // 可以先设置成 true ，接着 "Rebuild Project" 生成java文件后再设置成 false ，保证正常跳转
    // 因为设置成 true 后，模块为了能正常编译出 java 文件，不能循环模块依赖
    build_aidl = false

    //android开发版本配置
    androidSdk = [
            buildToolsVersion: "34.0.0",
            compileSdkVersion: 34,
            targetSdkVersion : 34,
            minSdkVersion    : 34,
    ]

    //获取所有的模块
    allModules = [:]
    for (Project subproject : project.subprojects) {
        def project_name = subproject.getName().toString()
        logger.debug(project_name)
        allModules.put(project_name, ":" + project_name)
    }
}

def getExtProperties() {
    Properties properties = new Properties()
    try {
        // 检查 ext/ext.properties 是否存在
        properties.load(project.rootProject.file('ext/ext.properties').newDataInputStream())
    } catch (Exception e) {
        logger.warn("has not ext/ext.properties, " + e)
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }

    return properties
}
